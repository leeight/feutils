<project name="closure-experiments" basedir=".">

  <property name="src.dir" value="${basedir}/src" />
  <property name="js-src.dir" value="${basedir}/js-src" />
  <property name="closure-compiler.dir" value="${basedir}/../closure-compiler" />
  <property name="closure-library.dir" value="${basedir}/../closure-library" />
  <property name="yuicompressor.dir" value="${basedir}/../yuicompressor-2.4.2" />
  <property name="build.dir" value="${basedir}/build" />
  <property name="classes.dir" value="${build.dir}/classes" />
  <property name="outputwrapper"
            value='"// Copyright 2010&#10;(function(){%output%})();"' />

  <target name="clean" description="delete generated files">
    <delete dir="${build.dir}" />
  </target>

  <target name="closure-compiler-jar"
          description="builds the Closure Compiler jar">
    <ant dir="${closure-compiler.dir}"
         antfile="${closure-compiler.dir}/build.xml"
         target="jar"
         inheritAll="false"
         />
  </target>
  
  <target name="java-compile"
          depends="closure-compiler-jar"
          description="compiles the com.bolinfest.closure package">
    <mkdir dir="${classes.dir}" />
    <javac srcdir="${src.dir}"
           destdir="${classes.dir}"
           classpath="${closure-compiler.dir}/build/compiler.jar"
           />
  </target>

  <macrodef name="compilerjar"
            description="builds a custom Closure Compiler jar using com.bolinfest.closure">
    <attribute name="mainclassname" />
    <attribute name="jarfilename" />
    <sequential>
      <antcall target="java-compile" />
      <jar destfile="${build.dir}/@{jarfilename}" update="false">
        <zipfileset src="${closure-compiler.dir}/build/compiler.jar" />
        <fileset dir="${classes.dir}" />
        <manifest>
          <attribute name="Main-Class" value="@{mainclassname}" />
        </manifest>
      </jar>
    </sequential>
  </macrodef>

  <target name="jar"
          description="builds a custom Closure Compiler jar using com.bolinfest.closure">
    <compilerjar mainclassname="com.bolinfest.closure.DebugStrippingCompilerRunner"
                 jarfilename="compiler.jar" />
  </target>

  <target name="awesomebar-concat">
    <mkdir dir="${build.dir}" />
    <exec executable="${closure-library.dir}/closure/bin/calcdeps.py"
          output="${build.dir}/awesomebar-concat.js"
          errorproperty="/dev/null">
      <arg line="-i ${js-src.dir}/awesomebar.js" />
      <arg line="-p ${closure-library.dir}" />
      <arg line="-o script" />
    </exec>
  </target>

  <target name="awesomebar-concat-anonymized" depends="awesomebar-concat">
    <mkdir dir="${build.dir}" />
    <concat destfile="${build.dir}/awesomebar-concat-anonymized.js">
      <header>(function(){</header>
      <filelist dir="${build.dir}" files="awesomebar-concat.js" />
      <footer>})();</footer>
    </concat>
  </target>
  
  <macrodef name="yui">
    <attribute name="inputfile" />
    <attribute name="outputfile" />
    <sequential>
      <mkdir dir="${build.dir}" />
      <ant dir="${yuicompressor.dir}"
           antfile="${yuicompressor.dir}/build.xml"
           target="build.jar"
           inheritAll="false"
           />
      <java jar="${yuicompressor.dir}/build/yuicompressor-2.4.2.jar"
            fork="true"
            output="@{outputfile}"
            errorproperty="/dev/null">
        <arg value="@{inputfile}" />
      </java>
    </sequential>
  </macrodef>

  <target name="awesomebar-yui"
          depends="awesomebar-concat">
    <yui inputfile="${build.dir}/awesomebar-concat.js"
         outputfile="${build.dir}/awesomebar-yui.js" />
  </target>

  <target name="awesomebar-anonymized-yui"
          depends="awesomebar-concat-anonymized">
    <yui inputfile="${build.dir}/awesomebar-concat-anonymized.js"
         outputfile="${build.dir}/awesomebar-anonymized-yui.js" />
  </target>

  <macrodef name="calcdeps">
    <attribute name="inputfile" default="${js-src.dir}/awesomebar.js" />
    <attribute name="outputfile" />
    <attribute name="compilerjarfile" default="${closure-compiler.dir}/build/compiler.jar" />
    <attribute name="compilationlevel" default="ADVANCED_OPTIMIZATIONS" />
    <attribute name="outputmode" default="compiled" />
    <element name="extraflags" optional="yes" />
    <sequential>
      <mkdir dir="${build.dir}" />
      <exec executable="python"
            failonerror="true"
            logError="true"
            output="${build.dir}/@{outputfile}"
            >
        <arg value="${closure-library.dir}/closure/bin/calcdeps.py" />
        <!-- Double-quote file arguments in case they contain spaces. -->
        <arg line='-i "@{inputfile}"' />
        <arg line='-p "${closure-library.dir}"' />
        <arg line="-o @{outputmode}" />
        <arg line='-c "@{compilerjarfile}"' />
        <arg line='-f "--compilation_level=@{compilationlevel}"' />
        <extraflags />
      </exec>
    </sequential>
  </macrodef>

  <target name="awesomebar-advanced-no-debug" depends="jar">
    <calcdeps outputfile="awesomebar-advanced-no-debug.js" compilerjarfile="${build.dir}/compiler.jar" />
  </target>

  <target name="awesomebar-advanced" depends="closure-compiler-jar">
    <calcdeps outputfile="awesomebar-advanced.js" />
  </target>

  <target name="awesomebar-simple" depends="closure-compiler-jar">
    <calcdeps outputfile="awesomebar-simple.js" compilationlevel="SIMPLE_OPTIMIZATIONS" />
  </target>

  <target name="awesomebar-whitespace-only" depends="closure-compiler-jar">
    <calcdeps outputfile="awesomebar-whitespace-only.js" compilationlevel="WHITESPACE_ONLY" />
  </target>

  <target name="awesomebar-all"
          depends="awesomebar-advanced-no-debug,
                   awesomebar-advanced,
                   awesomebar-simple,
                   awesomebar-whitespace-only,
                   awesomebar-concat,
                   awesomebar-yui,
                   awesomebar-anonymized-yui" />

  <target name="closure-lite-deps-list"
          description="creates list of Library files included in Closure Lite">
    <calcdeps inputfile="${basedir}/js-src/closure-lite/all-requires.js"
              outputfile="closure-lite-deps-list.js"
              outputmode="list"
              />
  </target>

  <target name="closure-lite" depends="jar">
    <!-- Use one compilation pass to generate goog.exportSymbol() calls and -->
    <!-- an externs file for properties that should not be renamed.         -->
    <compilerjar mainclassname="com.bolinfest.closure.ExportPublicMembersCompilerRunner"
                 jarfilename="exporter.jar" />
    <calcdeps inputfile="${basedir}/js-src/closure-lite/all-requires.js"
              outputfile="closure-lite-no-exports.js"
              compilerjarfile="${build.dir}/exporter.jar"
              />

    <!-- Combine the generate goog.exportSymbol() calls with all-requires.js -->
    <!-- to produce the one JS input file for the debug-stripping compiler.  -->
    <concat destfile="${build.dir}/closure-lite-precompiled.js">
      <filelist dir="${basedir}/js-src/closure-lite/" files="all-requires.js" />
      <filelist dir="${build.dir}" files="closure-lite-exports.js" />
    </concat>

    <!-- Use the debug-stripping compiler to produce closure-lite.js. -->
    <calcdeps inputfile="${build.dir}/closure-lite-precompiled.js"
              outputfile="closure-lite.js"
              compilerjarfile="${build.dir}/compiler.jar">
      <extraflags>
        <arg line='-f "--externs=${build.dir}/closure-lite-externs.js"' />
        <arg line='-f "--output_wrapper=${outputwrapper}"' />
      </extraflags>
    </calcdeps>
  </target>

</project>
