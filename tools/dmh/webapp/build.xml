<?xml version="1.0"?>
<project basedir="." default="compile">
  <property name="src.dir" value="${basedir}/src" />
  <property name="test.dir" value="${basedir}/test" />
  <property name="tools.dir" value="${basedir}/externs/sdcfe/tools" />
  <property name="build.dir" value="${basedir}/../output" />
  <property name="externs.js" value="${src.dir}/tangram.externs.js" />
  <property name="ant.lib.js" value="${tools.dir}/ant/lib/ant.lib.js" />
  <property environment="env" />

  <target name="clean" description="delete generated files">
    <delete dir="${build.dir}" />
  </target>

  <target name="compile" depends="clean">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var build_dir = _("build.dir");
      
      echo_env();

      merge_js("assets/js/dn.js");
      compile_js(build_dir + "/assets/js/dn.js", [ 
        "--externs=" + _("externs.js")
      ]);
      
      merge_css("assets/css/dn.css");
      compile_css(build_dir + "/assets/css/dn.css");
    	
      merge_tpl("src/dn/config.js");
    ]]>
    </script>
  </target>

  <target name="gcc-lint">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      echo_env();
      gcc_lint("assets/js/dn.js", [
        "--externs=" + _("externs.js")
      ]);
    ]]>
    </script>
  </target>

  <target name="deploy" depends="compile">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var build_dir = _("build.dir");
      /**
       * @param {string} file 要拷贝的文件名称.
       */
      function copy_to_build_dir(file, opt_overwrite) {
        var overwrite = true;
        if (opt_overwrite === false) {
          overwrite = false;
        }

        copy(file, build_dir + '/' + file, opt_overwrite);
      }

      var file_list = [
        'main.html', 'index.html', 
        'favicon.ico', 'robots.txt',
        'assets/history.html', 
        'assets/img', 'assets/flash',
        'bin'
      ];
      file_list.forEach(function(name){
        copy_to_build_dir(name);
      });
      
      // 拷贝额外的资源过去
      (['assets/js', 'assets/css']).forEach(function(dir){
        file_list = fileset(dir, /\.svn/);
        file_list.forEach(function(name){
          var dest_path = getPath(build_dir + '/' + name),
              dest = new java.io.File(dest_path);
          if (!dest.exists()) {
            copy(name, dest_path);
          }
        });
      });
      
      // 更改dn.js和clientdn.js中对tpl.html，history.html的引用
      var tpl_md5 = gen_checksum(build_dir + '/assets/tpl.html'),
          history_md5 = gen_checksum(build_dir + '/assets/history.html');
      function rewrite_build_file(input) {
        var content = readFile(input);
        if (!content) {
          return;
        }

        var BUILD_TIME = new Date().toString();
        var BUILD_VERSION = svnversion() + '@' + hostname();

        var newContent = content.replace('/assets/tpl.html', '/assets/tpl-' + tpl_md5 + '.html')
                                .replace('/assets/history.html', '/assets/history-' + history_md5 + '.html')
                                .replace('@BUILD_TIME@', BUILD_TIME)
                                .replace('@BUILD_VERSION@', BUILD_VERSION);
        writeFile(input, newContent);
      }
      rewrite_build_file(build_dir + '/assets/js/dn.js');
      rewrite_build_file(build_dir + '/assets/js/clientdn.js');

      // 更改dn.css中对assets/img中图片地址的引用
      var build_css = build_dir + '/assets/css/dn.css';
      var imgs = fileset(build_dir + '/assets/img');
      for (var i = 0, j = imgs.length; i < j; i ++) {
        var md5 = gen_checksum(imgs[i]);
        var name = basename(imgs[i]);
        var nae = splitext(name);
        
        var css = readFile(build_css);
        var newCss = css.replace(
          regexp('img/' + name, 'gi'),
          'img/' + nae[0] + '-' + md5 + nae[1]
        );
        writeFile(build_css, newCss);
      }

      file_list = [
        'assets/css/dn.css', 
        'assets/js/dn.js',
        'assets/js/clientdn.js'
      ];
      file_list.forEach(function(name){
        gen_checksum(build_dir + '/' + name);
      });

      // 更改main.html对dn.js和dn.css的引用
      var js_md5 = md5sum(build_dir + '/assets/js/dn.js'),
          css_md5 = md5sum(build_dir + '/assets/css/dn.css');
      var html = readFile(build_dir + '/main.html');
      var newHtml = html.replace('dn.js', 'dn-' + js_md5 + '.js')
                        .replace('dn.css', 'dn-' + css_md5 + '.css');
      writeFile(build_dir + '/main.html', newHtml);

    ]]>
    </script>
  </target>
	
	<target name="mergeCSS">
	    <script language="javascript" src="${ant.lib.js}">
	    <![CDATA[
	      var build_dir = _("build.dir");
	      merge_css("assets/css/dn.css");
	      compile_css(build_dir + "/assets/css/dn.css");
	    ]]>
	    </script>
	  </target>
  
  <target name="deps" description="generated deps.js">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      exec('python', [
        getPath(_('tools.dir') + '/lib/calcdeps.py'),
        '-o deps',
        '-p src',
        '-p test',
        '--output_file ' + getPath('src/deps.js')
      ]);
    ]]>
    </script>
  </target>

  <target name="lint" description="gjslint">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      gjslint('src/video');
    ]]>
    </script>
  </target>
</project>
